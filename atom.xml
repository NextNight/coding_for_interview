<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Kaka]]></title>
  <link href="http://atlasbl.cn/coding_for_interview/atom.xml" rel="self"/>
  <link href="http://atlasbl.cn/coding_for_interview/"/>
  <updated>2019-06-03T15:23:59+08:00</updated>
  <id>http://atlasbl.cn/coding_for_interview/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im">MWeb</generator>

  
  <entry>
    <title type="html"><![CDATA[深度学习中的防止过拟合机制]]></title>
    <link href="http://atlasbl.cn/coding_for_interview/15577405434359.html"/>
    <updated>2019-05-13T17:42:23+08:00</updated>
    <id>http://atlasbl.cn/coding_for_interview/15577405434359.html</id>
    <content type="html"><![CDATA[
<ul>
<li>dropout</li>
<li>batchnormalization</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深度学习中的优化器]]></title>
    <link href="http://atlasbl.cn/coding_for_interview/15577404931077.html"/>
    <updated>2019-05-13T17:41:33+08:00</updated>
    <id>http://atlasbl.cn/coding_for_interview/15577404931077.html</id>
    <content type="html"><![CDATA[
<ul>
<li>sgd</li>
<li>adam</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深度学习中的激活函数]]></title>
    <link href="http://atlasbl.cn/coding_for_interview/15577404400424.html"/>
    <updated>2019-05-13T17:40:40+08:00</updated>
    <id>http://atlasbl.cn/coding_for_interview/15577404400424.html</id>
    <content type="html"><![CDATA[
<ul>
<li>relu</li>
<li>tanch</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深度学习中的注意力机制(Attention Mechanism)]]></title>
    <link href="http://atlasbl.cn/coding_for_interview/15574848959443.html"/>
    <updated>2019-05-10T18:41:35+08:00</updated>
    <id>http://atlasbl.cn/coding_for_interview/15574848959443.html</id>
    <content type="html"><![CDATA[
<p>Attention Mechanism:人类在观察事物，思考事情的时候往往会将注意力聚焦到某个位置或者某个点上，而忽略其他不相关的、相关性弱的事物上，这就是人类注意力机制，那么对于机器来说同样可以在各种任务中加入这种机制来提升解决问题的能力，这就是机器的注意力机制，那么这种机制如何实现的呢，又是如何发展的呢？</p>

<h1 id="toc_0">注意力机制的发展史</h1>

<p>注意力机制最早被使用于图像领域，好像很多东西都是从图像领域开始被使用进而发展到各个领域中，包括深度学习的盛行也是。Attention最早在图像领域被踢出来的时候同样是沉默了很久，没有被开发出什么威力，就像当年的神经网络一样，直到google mind团队的这篇论文《Recurrent Models of Visual Attention》，使用RNN+Attention进行图像分类，是的Attention被众人所熟知。之后Bahdanau等人在论文《Neural Machine Translation by Jointly Learning to Align and Translate》将Attention应用于NLP领域的机器翻译。到了2016年左右基于CNN的Attention机制也被用于NLP领域，再到2017年的基于自注意力机制的特征抽取器Transformer,2018年的BERT刷新NLP的各项任务记录，Attention的江湖地位也越来越高。</p>

<h1 id="toc_1">Ecoder-Decoder架构</h1>

<p>Ecoder-Decoder是一种模型架构，这种结构可以用来解决多种seq-seq问题，如：机器翻译,摘要生成，自动对话，图像标题生成，语音识别。。。这种结构可以采用多种多样的实现，只要改变Ecoder或者Decoder中的网络层结构，就可以得到一种新的Model.</p>

<h1 id="toc_2">机器翻译</h1>

<p><img src="media/15574848959443/15574891500614.jpg" alt="" style="width:827px;"/><br/>
早期的机器翻译采用RNN作为编码-解码的网络结构，RNN可以解决单词之间的依赖问题，使翻译更流畅编码器。将输入语句编码成一个中间语义向量C,解码器通过对这个中间语义和生成的单词进行下一个单词的解码，一步步得到后续的翻译结果，如下图：<br/>
<img src="media/15574848959443/15574895459703.jpg" alt="" style="width:827px;"/></p>

<p>这种结构存在一个问题就是无论我们翻译出哪一个词所使用的中间语义C都是同一个，而且这个固定大小的中间语义向量无论句子的长度大小，向量C都不会改变。这就导致句子越长的时候这个中间向量的抽象程度越高，所包含的单独每个向量的信息就越少。解决这个问题的关键就是注意力机制，加入注意力机制对于每个要解码的单词给与不同的中间语义C,不仅仅是不同，他同时对于要解码的目标单词去关注输入源数据中的相关的单词，找到二者存在的某种神秘联系。_注意力机制的一个很好的副产品是源语句和目标语句之间易于可视化的对齐矩阵_（如图4所示）。<br/>
<img src="media/15574848959443/15577357222907.jpg" alt="" style="width:821px;"/><br/>
它展示英语-翻译成-法语是解码器的注意力权重，即每解码一个单词对原语句中每个单词的关注程度。每一行代表的都是一个要翻译词的注意力权重。</p>

<h3 id="toc_3">基于rnn+attention的神经网络机器翻译结构如下：</h3>

<p><img src="media/15574848959443/15574895910789.jpg" alt="" style="width:826px;"/><br/>
如上图所示，注意力计算在每个解码器时间步骤发生。它包括以下几个阶段：---</p>

<ul>
<li>1.将当前目标隐藏状态\( h_t \)与所有源状态\( \overline {h} _s \)进行比较以得出注意力权重\(\alpha_{t s}\)（可以如图4中那样可视化）。</li>
<li>2.基于注意力权重\(\alpha_{t s}\)，我们计算上下文向量作为源状态\( \overline {h} _s \)的加权平均值。</li>
<li>3.将上下文向量\({c}_t\)与当前目标隐藏状态\({h}_t\)组合以产生最终之注意力向量</li>
<li>4.注意向量作为输入馈送到下一个时间步（输入馈送）。</li>
</ul>

<h4 id="toc_4">前三个步骤可以通过以下等式汇总：</h4>

<p>\[<br/>
\begin{aligned} \alpha_{t s} &amp;=\frac{\exp \left(\operatorname{score}\left(\boldsymbol{h}_{t}, \overline{\boldsymbol{h}}_{s}\right)\right)}{\sum_{s^{\prime}=1}^{S} \exp \left(\operatorname{score}\left(\boldsymbol{h}_{t}, \overline{\boldsymbol{h}}_{s^{\prime}}\right)\right)} &amp;[\text { Attention weights }](1)\\ \boldsymbol{c}_{t} &amp;=\sum_{s} \alpha_{t s} \overline{\boldsymbol{h}}_{s} &amp;[\text { Context vector }](2)\\ \boldsymbol{a}_{t} &amp;=f\left(\boldsymbol{c}_{t}, \boldsymbol{h}_{t}\right)=\tanh \left(\boldsymbol{W}_{c}\left[\boldsymbol{c}_{t} ; \boldsymbol{h}_{t}\right]\right) &amp;[\text { Attention vector }](3) \end{aligned}<br/>
\]<br/>
这里，该函数score用于将目标隐藏状态\( h_t \)与每个源隐藏状态\( \overline {h} _s \)进行比较，并将结果归一化(softmax)为产生的注意力权重（源位置的分布） ）。<br/>
评分功能有多种选择; 流行的评分函数包括公式中给出的乘法和加法形式。该功能函数f也可以采取其他形式。<br/>
\[<br/>
\operatorname{score}\left(\boldsymbol{h}_{t}, \overline{\boldsymbol{h}}_{s}\right)=\left\{\begin{array}{ll}{\boldsymbol{h}_{t}^{\top} \boldsymbol{W} \overline{\boldsymbol{h}}_{s}} &amp; {[\text { Luong&#39;s multiplicative style] }} \\ {\boldsymbol{v}_{a}^{\top} \tanh \left(\boldsymbol{W}_{1} \boldsymbol{h}_{t}+\boldsymbol{W}_{2} \overline{\boldsymbol{h}}_{s}\right)} &amp; {[\text { Bahdanau&#39;s additive style] }}\end{array}\right.<br/>
\]</p>

<h4 id="toc_5">第四步骤的细节</h4>

<p>注意力向量作为下一个时间步\({h}_{t+1}\)的输入，但是我们不能直接使用一个关于所有原词的注意力权重作为一个输入，我们必须选择一个单词来作为下一个时间步的输入，如何选择呢？_最简单的就是选择注意力权重中权重最大的位置对应的单词作为下一个是时间步的输入_，如下图：<br/>
<img src="media/15574848959443/15577384343749.jpg" alt="" style="width:827px;"/><br/>
这就是<code>贪婪搜索</code>，每一步都选择最好的，得到的结果至少是个差不多的结果，能得到一个局部最优结果。但是并不一定能得到最优的解码结果。它的优点是速度快。为了得到更好的结果我们可以选择<code>beam_search</code>集束搜索这种搜索策略，它可以得到多的搜索空间，以提高搜索的准确性。</p>

<h1 id="toc_6">注意力机制</h1>

<h2 id="toc_7">Attention的定义：</h2>

<p>1、给定一组向量集合values，以及一个向量query，attention机制是一种根据该query计算values的加权求和的机制。<br/>
2、attention的重点就是这个集合values中的每个value的“权值”的计算方法。<br/>
3、有时候也把这种attention的机制叫做query的输出关注。(Query attends to the values）</p>

<blockquote>
<p>在机器翻译中，Query=上一个翻译的词，key=value=源数据中的单词。目标就是得到一个关于源数据中每个单词的注意力向量。</p>
</blockquote>

<h2 id="toc_8">Soft Attention</h2>

<p><img src="media/15574848959443/15578218747502.jpg" alt="" style="width:761px;"/><br/>
在这里有两个计算函数\(f(hs,ht)\)和\(f（hs,ws）\),前一个函数是得分计算函数：可以是<code>点积</code>，<code>cos相似度</code>等，计算这个得分之后需要计算权重，原始使用的是<code>softamx</code>函数，得到的是关于所有源数据的注意力权重，然后再计算注意力权重和源数据的点积，这就是<code>gloal attention</code>,它存在一个很大的缺点就是关注的数据太多，计算复杂。因此提出了一种只关注部分数据的<code>local attention</code>,它所产生的注意力向量部分有值，其他部分为0。<br/>
<img src="media/15574848959443/15578279324697.jpg" alt=""/><br/>
当注意力向量是一个one-hot向量时，他所关注的仅仅是只有一个源数据单词，这就是<code>Hard attention</code>。</p>

<h2 id="toc_9">self Attention</h2>

<p>自注意力是一种非常特殊的注意力机制，<code>soft attention</code>中query和key,value两组不同的数据，它是一种生成target需要关注source的关系，而自注意力是在source或target中去寻找单词之间的关系，他可以找到某句话每个单词跟其他单词的关注关系或者是依赖关系，可以更容易捕获同一个句子中单词之间的一些句法特征或者语义特征，这就十分像rnn，但是rnn只能顺序捕捉依赖关系，并不能直接关注到目标单词，相隔越远，有效捕捉到关系的可能性就越小。而self attention直接将两个单词联系起来。</p>

<p>可以发现self attention更能发掘数据本身存在的特点，让数据本身变得菱角分明，相比rnn更适合作为数据的特征抽取，在<a href="https://arxiv.org/pdf/1703.03130.pdf">A structured Self-Attentive Sentence Embedding</a>中介绍了self attention的定义和计算方法，以及基于这种自注意力机制的句子嵌入提取及其在3个NLP任务中的表现远超隐层数据的maxpool和avg作为句子嵌入。</p>

<p><code>self attention</code>忽略了语序可以直接关注不同时间步间的单词，提高了长距离依赖的有效性，这是一个很大的优点，同时也带了一个缺点就是它无法编码单词之间的顺序信息，然而在NLP中的数据都是时序数据，位置信息十分重要，因此提出了一种<code>位置编码</code>向量作为辅助输入解决这个问题。</p>

<h1 id="toc_10">参考内容</h1>

<ul>
<li><a href="https://blog.csdn.net/malefactor/article/details/50550211">自然语言处理中的Attention Model：是什么及为什么</a></li>
<li><a href="https://github.com/tensorflow/nmt">Tensorflow的神经网络机器翻译</a></li>
<li>Attention解决长期记忆问题：<a href="https://arxiv.org/pdf/1512.08756.pdf">FEED-FORWARD NETWORKS WITH ATTENTION CAN SOLVE SOME LONG-TERM MEMORY PROBLEMS</a></li>
<li>机器翻译与Attention：<a href="https://arxiv.org/pdf/1409.0473.pdf">NEURAL MACHINE TRANSLATION BY JOINTLY LEARNING TO ALIGN AND TRANSLATE</a></li>
<li>自注意力机制：<a href="https://arxiv.org/pdf/1703.03130.pdf">A structured Self-Attentive Sentence Embedding</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据结构]]></title>
    <link href="http://atlasbl.cn/coding_for_interview/15510643590406.html"/>
    <updated>2019-02-25T11:12:39+08:00</updated>
    <id>http://atlasbl.cn/coding_for_interview/15510643590406.html</id>
    <content type="html"><![CDATA[
<p>数据结构：是一中存储和组织数据的方式，选择合适的数据结构对于各种数据操作的效率有很大的提升。以下是常用的数据结构及相关的关系<br/>
<img src="media/15510643590406/15510705984151.jpg" alt="" style="width:780px;"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数组：Array]]></title>
    <link href="http://atlasbl.cn/coding_for_interview/15391804069666.html"/>
    <updated>2018-10-10T22:06:46+08:00</updated>
    <id>http://atlasbl.cn/coding_for_interview/15391804069666.html</id>
    <content type="html"><![CDATA[
<p>在计算器科学中，数组数据结构（英语：array data structure），简称数组（英语：Array），是由_相同类型_的元素（element）的集合所组成的数据结构，「_分配一块连续的内存来存储_」。利用元素的索引（index）可以计算出该元素对应的存储地址。</p>

<p>最简单的数据结构类型是一维数组。例如，索引为0到9的32位整数数组，可作为在存储器地址2000，2004，2008，...2036中，存储10个变量，因此索引为i的元素即在存储器中的2000+4×i地址。数组第一个元素的存储器地址称为第一地址或基础地址。<br/>
<img src="media/15391804069666/15501317583804.jpg" alt="" style="width:815px;"/><br/>
同样可以得到二维数组a[m][n],(m行n列)的寻址公式：a[i][j] = startaddress+(i·n+j)*type_size</p>

<h2 id="toc_0">数组的特点</h2>

<ul>
<li>连续的内存：存储地址连续</li>
<li>同一类型：一个数组内只能存储统一数据类型的数据</li>
<li>相同大小：相同类型则大小相同</li>
<li>随机访问：可直接根据下标得到存储地址访问到数据</li>
<li>插入删除耗时：插入和删除为了保证空间的连续性，需要不断的进行数据的移动。</li>
<li>初始化必须知道大小：因为需要分配连续的空间</li>
<li>扩容消耗时间，空间：扩容时需要进行数据的copy，索引尽量减少扩容操作，需要多大的空间就申请多大的空间。避免多次的扩容操作。</li>
</ul>

<h2 id="toc_1">数组应用</h2>

<ul>
<li>实现List：List这种数据结构就是通过数组实现的</li>
<li>实现String：字符串这种数据结构就是通过字符数组实现的</li>
<li>实现：队列，堆，树，栈。</li>
</ul>

<h2 id="toc_2">数组相关的题目</h2>

<p><a href="15392386512557.html">两数之和</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[链表：LinkedList]]></title>
    <link href="http://atlasbl.cn/coding_for_interview/15391807987921.html"/>
    <updated>2018-10-10T22:13:18+08:00</updated>
    <id>http://atlasbl.cn/coding_for_interview/15391807987921.html</id>
    <content type="html"><![CDATA[
<p>链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针(Pointer)。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而顺序表相应的时间复杂度分别是O(logn)和O(1)。</p>

<p>使用链表结构可以克服数组链表需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。</p>

<h1 id="toc_0">链表的特点</h1>

<ul>
<li>不使用连续的内存</li>
<li>只能顺序访问，不能随机读取</li>
<li>插入，删除简单，查找慢</li>
<li>动态扩展</li>
</ul>

<h1 id="toc_1">常见链表</h1>

<ul>
<li>单向链表</li>
<li>双向链表</li>
<li>循环链表</li>
</ul>

<h1 id="toc_2">链表的实现</h1>

<p>Python List实现链表：</p>

<pre class="line-numbers"><code class="language-python">class Node(object):
    &quot;&quot;&quot;定义链表的节点&quot;&quot;&quot;

    def __init__(self, data):
        self._data = data
        self._next = None


class LinkedList(object):
    def __init__(self):
        self._head = Node(None)
        self._tail = Node(None)
        self._head._next=self._tail
        self._size = 0

    def add(self, data):
        &quot;&quot;&quot;头插法：新加入的元素永远在head._next&quot;&quot;&quot;
        node = Node(data)
        node._next = self._head._next
        self._head._next = node

        self._size += 1

    def remove(self, data):
        &quot;&quot;&quot;删除节点&quot;&quot;&quot;
        prev = self._head
        while prev._next is not self._tail:
            cur = prev._next
            if cur._data() == data:
                prev._next = cur._next

        self._size -=1

    def size(self):
        return self._size

    def is_exist(self, data):
        &quot;&quot;&quot;查询某值是否在链表&quot;&quot;&quot;
        if any([self._head._next == self._tail, data == None]):
            return False
        cur = self._head._next
        while cur is not self._tail:
            if cur.get_data == data:
                return True
            else:
                return False

    def is_empty(self):
        return self._head._next == self._tail

    def foreach(self):
        if self._head._next == self._tail:
            return None
        data = []
        cur = self._head._next
        while cur is not self._tail:
            data.append(cur._data)
            cur = cur._next
        return data

if __name__ == &#39;__main__&#39;:
    linkedlist = LinkedList()
    linkedlist.add(1)
    linkedlist.add(2)
    linkedlist.add(3)
    print(linkedlist.foreach())
    print(linkedlist.size())
    ```
因为是自定义实现，使用了固定长度的List来实现，链表的重要操作难度是在删除和添加节点上，

**⚠️注意**：`Head指针永远不变，是链表的开始`，不要直接使用head指针直接去进行指针移动，这样就无法返回操作后的链表了。

# 链表相关的题目
全部来源于[Leetcode](https://leetcode-cn.com/)中文网

</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[栈：Stack]]></title>
    <link href="http://atlasbl.cn/coding_for_interview/15392291360952.html"/>
    <updated>2018-10-11T11:38:56+08:00</updated>
    <id>http://atlasbl.cn/coding_for_interview/15392291360952.html</id>
    <content type="html"><![CDATA[
<p>栈（英语：stack）又称为栈或堆叠，是计算机科学中一种特殊的串列形式的抽象数据类型，其特殊之处在于只能允许在链表或数组的一端（称为堆栈顶端指针，英语：top）进行加入数据（英语：push）和输出数据（英语：pop）的运算。另外栈也可以用一维数组或链表的形式来完成。堆栈的另外一个相对的操作方式称为队列。</p>

<p>由于堆栈数据结构只允许在一端进行操作，因而按照后进先出（LIFO, Last In First Out）的原理运作</p>

<h1 id="toc_0">栈的操作</h1>

<p>堆栈数据结构使用两种基本操作：推入（压栈，push）和弹出（弹栈，pop）：</p>

<ul>
<li>推入：将数据放入堆栈的顶端（数组形式或串列形式），堆栈顶端top指针加一。</li>
<li>弹出：将顶端数据数据输出（回传），堆栈顶端数据减一。</li>
</ul>

<h1 id="toc_1">栈的实现</h1>

<ul>
<li>栈可以用数组实现(顺序栈）：需要面对动态扩容的问题，最坏的情况是扩容数组需要O（n）时间复杂度。</li>
</ul>

<pre class="line-numbers"><code class="language-python">class Stack(object):
    &#39;&#39;&#39;数组实现&#39;&#39;&#39;
    def __init__(self, init_size):
        self._data = [0] * init_size
        self._top = 0
        self._size = init_size

    def isempty(self):
        return self._top==0

    def push(self, item):
        if self._top&gt;=self._size-1:
            print(&quot;stack full&quot;)
        else:
            self._top += 1
            self._data[self._top] = item

    def pop(self):
        if self.isempty():
            print(&quot;stack empty&quot;)
            return None
        else:
            top = self._data[self._top]
            self._top -= 1
            return top
</code></pre>

<ul>
<li>也可以用链表实现（链式栈）：入栈，出栈时间复杂度都是O（1）。<br/>
```python<br/>
class Node(object):<br/>
&quot;&quot;&quot;定义链表的节点&quot;&quot;&quot;<br/>
def <strong>init</strong>(self, data):<br/>
    self.data_ = data<br/>
    self.next_ = None</li>
</ul>

<p>class Stack_imp_linkedlist(object):<br/>
    &#39;&#39;&#39;链表实现栈&#39;&#39;&#39;<br/>
    def <strong>init</strong>(self,):<br/>
        self.Link = Node(None)<br/>
        self.top = None<br/>
        self.len = 0</p>

<pre class="line-numbers"><code class="language-text">def push(self,item):
    p = Node(item)
    p.next_=self.Link.next_
    self.Link.next_=p
    self.top=p
    self.len+=1

def pop(self):
    if self.len&gt;0:
        data = self.top.data_
        self.Link.next_ = self.top.next_
        self.top = self.Link.next_
        self.len-=1
        return data
    else:
        print(&#39;Stack empty&#39;)
        return None
</code></pre>

<pre class="line-numbers"><code class="language-text"># 栈的应用
### 线程栈帧中的函数调用栈
每个线程都会分配一块独立的内存空间，这块空间被组织成`栈`这种结构，用来存储函数调用的是的临时变量。每执行一个函数，都会将其中的临时变量作为一个栈帧入栈，执行完之后，则会将这个函数对应的栈帧出栈。

### 表达式求值
如：3+4*5-2
编译器通过两个栈来实现表达式求值，一个栈存储操作数，一个存储操作符，

### 括号匹配
使用栈来检查表达式中的括号是否匹配，括号必须是成对出现的。而且不能交叉嵌套，

### 浏览器的前进后退
两个栈来实现浏览器的前进和后退功能，同样链表和数组也可以实现这个功能(因为链表和数组可以实现栈🙄)。





</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[队列：Queue]]></title>
    <link href="http://atlasbl.cn/coding_for_interview/15391808453198.html"/>
    <updated>2018-10-10T22:14:05+08:00</updated>
    <id>http://atlasbl.cn/coding_for_interview/15391808453198.html</id>
    <content type="html"><![CDATA[
<p>队列是先进先出（FIFO, First-In-First-Out）的线性表。在具体应用中通常用链表或者数组来实现。队列只允许在后端（称为rear）进行插入操作，在前端（称为front）进行删除操作。</p>

<p>队列的操作方式和堆栈类似，唯一的区别在于队列只允许新数据在后端进行添加。</p>

<h1 id="toc_0">队列的特点</h1>

<ul>
<li>先入先出</li>
</ul>

<h1 id="toc_1">队列的简单实现</h1>

<h4 id="toc_2">1.顺序队列：数组实现</h4>

<pre class="line-numbers"><code class="language-python">class Queue(object):
    def __init__(self, init_size):
        self._data = [None] * init_size
        self._head = -1
        self._tail = -1
        self._size = init_size

    def add(self, item):
        if self._tail &gt;= self._size-1:
            print(&quot;queue full&quot;)
        else:
            self._tail += 1
            self._data[self._tail] = item

    def poll(self):
        if self._head &gt;= self._tail:
            print(&quot;queue empty&quot;)
        else:
            self._head += 1
            top = self._data[self._head]
            self._data[self._head] = None
            return top

    def foreach(self):
        rs = []
        while self._head &lt;= self._tail-1:
            top = self.poll()
            rs.append(top)
        return rs
</code></pre>

<h4 id="toc_3">2. 两个栈实现队列</h4>

<pre class="line-numbers"><code class="language-text">
</code></pre>

<h1 id="toc_4">队列的应用</h1>

<p>对于需要顺序执行的任务尝试用队列这种结构实现。</p>

<h1 id="toc_5">队列相关题目</h1>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[堆：Heap]]></title>
    <link href="http://atlasbl.cn/coding_for_interview/15392363328863.html"/>
    <updated>2018-10-11T13:38:52+08:00</updated>
    <id>http://atlasbl.cn/coding_for_interview/15392363328863.html</id>
    <content type="html"><![CDATA[
<p>堆（英语：Heap）是计算机科学中的一种特别的<code>树状数据结构</code>。若是满足以下特性，即可称为堆：“给定堆中任意节点 P 和 C，若 P 是 C 的母节点，那么 P 的值会小于等于（或大于等于） C 的值”。若母节点的值恒小于等于子节点的值，此堆称为<code>最小堆</code>（英语：min heap）；反之，若母节点的值恒大于等于子节点的值，此堆称为<code>最大堆</code>（英语：max heap）。在堆中最顶端的那一个节点，称作根节点（英语：root node），根节点本身没有母节点（英语：parent node）。</p>

<p>堆始于 W. J. Williams 在 1964 年发表的<code>堆排序</code>（英语：heap sort），当时他提出了二叉堆树作为此算法的数据结构。堆在戴克斯特拉算法（英语：Dijkstra&#39;s algorithm）中亦为重要的关键。</p>

<p>在队列中，调度程序反复提取队列中第一个作业并运行，因为实际情况中某些时间较短的任务将等待很长时间才能结束，或者某些不短小，但具有重要性的作业，同样应当具有优先权。堆即为解决此类问题设计的一种数据结构「『优先级队列』」。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[图：Graph]]></title>
    <link href="http://atlasbl.cn/coding_for_interview/15392292553953.html"/>
    <updated>2018-10-11T11:40:55+08:00</updated>
    <id>http://atlasbl.cn/coding_for_interview/15392292553953.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[哈希表：Hash]]></title>
    <link href="http://atlasbl.cn/coding_for_interview/15392292427453.html"/>
    <updated>2018-10-11T11:40:42+08:00</updated>
    <id>http://atlasbl.cn/coding_for_interview/15392292427453.html</id>
    <content type="html"><![CDATA[
<p>。。。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[树：Tree]]></title>
    <link href="http://atlasbl.cn/coding_for_interview/15392291769523.html"/>
    <updated>2018-10-11T11:39:36+08:00</updated>
    <id>http://atlasbl.cn/coding_for_interview/15392291769523.html</id>
    <content type="html"><![CDATA[
<p>树是一种抽象数据类型（ADT）或是实现这种抽象数据类型的数据结构，用来模拟具有树状结构性质的数据集合。它是由n（n&gt;0）个有限节点组成一个具有层次关系的集合。把它叫做“树”是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：</p>

<ul>
<li>每个节点有零个或多个子节点；</li>
<li>没有父节点的节点称为根节点；</li>
<li>每一个非根节点有且只有一个父节点；</li>
<li>除了根节点外，每个子节点可以分为多个不相交的子树；</li>
</ul>

<h1 id="toc_0">树的实现方式</h1>

<ul>
<li>二维数组：每个数组是树的一个节点node,每个node存储了当前节点的数据和它的父节点索引。</li>
<li>字典实现：</li>
</ul>

<h1 id="toc_1">树的应用</h1>

<ul>
<li>二叉树
<ul>
<li>AVL：平衡二叉树，当且仅当任何节点的两棵子树的高度差不大于1的二叉树；</li>
<li>BST：排序二叉树，二叉查找树</li>
</ul></li>
<li>Huffman树：带权路径最短的二叉树称为哈夫曼树或最优二叉树</li>
<li>B树：一种对读写操作进行优化的自平衡的二叉查找树，能够保持数据有序，拥有多于两个子树。</li>
<li>B+树：B树的优化</li>
<li>RBT红黑树：</li>
<li>堆Heap：二叉堆，斐波那契堆</li>
<li>Trie树：</li>
</ul>

<h1 id="toc_2">二叉树的python实现</h1>

<pre class="line-numbers"><code class="language-text">def 
</code></pre>

<h1 id="toc_3">二叉树的基本操作</h1>

<ul>
<li>层次遍历</li>
<li>之字形遍历</li>
<li>先序遍历</li>
<li>中序遍历</li>
<li>后序遍历</li>
</ul>

<h1 id="toc_4">二叉树的相关题目</h1>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[🐱 查找问题]]></title>
    <link href="http://atlasbl.cn/coding_for_interview/15393054098142.html"/>
    <updated>2018-10-12T08:50:09+08:00</updated>
    <id>http://atlasbl.cn/coding_for_interview/15393054098142.html</id>
    <content type="html"><![CDATA[
<p>最常见的查找就是<code>二分查找</code>，多数的查找问题的解决方案都是转化为选择合适的数据结构存储，再利用数据结构的特性来解决。比如：<code>Hash表</code>能够实现数据的直接定位，即O(1)的时间复杂度。<code>二叉排序树</code>，<code>红黑树</code>，<code>B树</code>，这些数据结构的设计就是为了解决数据搜索的问题。还有一些数据的查找如TopN借助于排序算法，</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二分查找]]></title>
    <link href="http://atlasbl.cn/coding_for_interview/15395253854404.html"/>
    <updated>2018-10-14T21:56:25+08:00</updated>
    <id>http://atlasbl.cn/coding_for_interview/15395253854404.html</id>
    <content type="html"><![CDATA[
<p>二分查找是一种查询算法，它的前提是：<code>数据必须有序</code>，基本思想是不断的将数据2分(即不断的去缩小一半的搜索范围)最终定位找到查询数据。</p>

<h1 id="toc_0">二分搜索的步骤：</h1>

<ol>
<li>用数组的中间元素比较key,相等则返回中间元素的索引</li>
<li>如果中间元素大于key,则在左侧继续查找</li>
<li>如果中间元素小于key,则在右侧继续查找</li>
<li>直到定位到单个元素为止</li>
</ol>

<h1 id="toc_1">二分查找的实现</h1>

<h4 id="toc_2">1、递归实现</h4>

<pre class="line-numbers"><code class="language-python">def binary_search(nums, start, end, key):
    &quot;&quot;&quot;递归实现&quot;&quot;&quot;
    if start &gt; end or nums==None:
        return None
    mid = start + int((end-start) / 2)
    if nums[mid] &gt; key:
        return binary_search(nums, start, mid-1, key)
    elif nums[mid] &lt; key:
        return binary_search(nums, mid+1, end, key)
    else:
        return mid
    return None
</code></pre>

<h4 id="toc_3">2、非递归实现</h4>

<pre class="line-numbers"><code class="language-python">def binary_search2(nums, start, end, key):
    &quot;&quot;&quot;非递归实现&quot;&quot;&quot;
    if start&gt;end or nums==None:
        return None
    while start &lt;= end:
        mid = start + int((end - start) / 2)
        if nums[mid] &gt; key:
            end = mid - 1
        elif nums[mid] &lt; key:
            start = mid + 1
        else:
            return mid
    return None
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[🐱 排序问题]]></title>
    <link href="http://atlasbl.cn/coding_for_interview/15392700147620.html"/>
    <updated>2018-10-11T23:00:14+08:00</updated>
    <id>http://atlasbl.cn/coding_for_interview/15392700147620.html</id>
    <content type="html"><![CDATA[
<p>在计算器科学与数学中，一个排序算法（英语：Sorting algorithm）是一种能将一串数据依照特定排序方式进行排列的一种算法。最常用到的排序方式是数值顺序以及字典顺序。有效的排序算法在一些算法（例如搜索算法与合并算法）中是重要的，如此这些算法才能得到正确解答。排序算法也用在处理文字数据以及产生人类可读的输出结果。基本上，排序算法的输出必须遵守下列两个原则：</p>

<ul>
<li>输出结果为递增序列（递增是针对所需的排序顺序而言）</li>
<li>输出结果是原输入的一种排列、或是重组<br/>
虽然排序算法是一个简单的问题，但是从计算器科学发展以来，在此问题上已经有大量的研究。举例而言，冒泡排序在1956年就已经被研究。虽然大部分人认为这是一个已经被解决的问题，有用的新算法仍在不断的被发明。<a href="https://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95">source：wiki</a></li>
</ul>

<h1 id="toc_0">排序算法的简单对比</h1>

<p><img src="media/15392697680749/15392699931786.jpg" alt="" style="width:1449px;"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[计数排序]]></title>
    <link href="http://atlasbl.cn/coding_for_interview/15392716754828.html"/>
    <updated>2018-10-11T23:27:55+08:00</updated>
    <id>http://atlasbl.cn/coding_for_interview/15392716754828.html</id>
    <content type="html"><![CDATA[
<p>计数排序（Counting sort）是一种稳定的线性时间排序算法。计数排序使用一个额外的数组 \({\displaystyle C}\) ，其中第i个元素是待排序数组 \({\displaystyle A}\)中值等于 \({\displaystyle i}\)的元素的个数。然后根据数组 \({\displaystyle C}\) 来将 \({\displaystyle A}\)中的元素排到正确的位置。</p>

<h1 id="toc_0">计数排序的时间复杂度</h1>

<p>O（n+k）</p>

<h1 id="toc_1">计数排序的优缺点</h1>

<ul>
<li>非比较排序，比任何比较排序的速度都快</li>
<li>不适合数据范围特别大的数据排序（数据量少，数据跨度大，会造成大量的空间浪费）</li>
</ul>

<h1 id="toc_2">计数排序的思想</h1>

<p>用数组的下标来表述要排序的数据，比如：数据3就给下标为3的位置+1，所以需要一个长度为数组中最大数值+1的一个数组来存储数据，步骤如下：<br/>
1、创建空间一个待排数组中最大值+1的数组numsk，这个数组的下标表示排序的数据，初始值为0，代表这个数字出现0次<br/>
2、遍历待排序数组nums，每个数num就给numsk中下表为num的数据+1,即数据num出现了一次。<br/>
3、遍历完之后数组numsk表示从0到K,每个数出现的次数。因为0-k是顺序的，则只需要遍历这个数组，用数组的下标*当前下标的数值(次数)，就得到了排序的结果。</p>

<h1 id="toc_3">计数排序的实现</h1>

<pre class="line-numbers"><code class="language-python">def countingSort(nums):
    &#39;&#39;&#39;计数排序&#39;&#39;&#39;
    k = max(nums) + 1
    numsk = [0] * k
    for num in nums:
        numsk[num] += 1
    numsn = []
    for i,num in enumerate(numsk):
        numsn.extend([i]*num)
    return numsn
</code></pre>

<h1 id="toc_4">案例解析：</h1>

<pre class="line-numbers"><code class="language-text">nums = [3,6,2,8,3,5,1,10]
k = 10+1
numsk = [0,0,0,0,0,0,0,0,0,0,0]
numsk = [0,1,1,2,0,0,1,0,1,0,1]
numsn = [1,2,3,3,6,8,10]
</code></pre>

<h1 id="toc_5">存在的问题：</h1>

<p>1、当数据的最小值不是从0开始的时候就会浪费大量的数组空间，比如：[90,92,94],只有3个数却要创建一个长度为95的数组<br/>
2、稳定性的问题，某个数出现了多次，<code>无法保证相对顺序</code>。<br/>
3、用数组的下标来表示一个数，就限制了需要排序的数据必须是<code>正整数</code>.</p>

<h1 id="toc_6">改进</h1>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[希尔排序]]></title>
    <link href="http://atlasbl.cn/coding_for_interview/15392716677172.html"/>
    <updated>2018-10-11T23:27:47+08:00</updated>
    <id>http://atlasbl.cn/coding_for_interview/15392716677172.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0"></h2>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[桶排序]]></title>
    <link href="http://atlasbl.cn/coding_for_interview/15392715483846.html"/>
    <updated>2018-10-11T23:25:48+08:00</updated>
    <id>http://atlasbl.cn/coding_for_interview/15392715483846.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0"></h2>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[归并排序]]></title>
    <link href="http://atlasbl.cn/coding_for_interview/15392715143262.html"/>
    <updated>2018-10-11T23:25:14+08:00</updated>
    <id>http://atlasbl.cn/coding_for_interview/15392715143262.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0"></h2>

<h1 id="toc_1">排序实现</h1>

<pre class="line-numbers"><code class="language-python">&quot;&quot;&quot;
  @Date    : 2019-04-08
  @Author  : Kaka
  @File    : merge_sort.py
  @Software: PyCharm
  @Contact : 
  @Desc    : 归并排序：分治法，先划分，再排序，再合并。
    递归状态转移方程：
        merger_sort(nums) = merge(merge_sort(nums[:mid]),merge_sort(nums[mid:]))
    终止条件：
        if len(nums)&lt;=1:不再继续分解
    
    merger_sort:表示排序
    merge      :表示合并
&quot;&quot;&quot;
import time

def meger(left, right):
&#39;&#39;&#39;合并&#39;&#39;&#39;
    rs = []
    i, j = 0, 0
    while i &lt; len(left) and j &lt; len(right):
        if left[i] &lt; right[j]:
            rs.append(left[i])
            i += 1
        else:
            rs.append(right[j])
            j += 1
    if i &lt; len(left):
        rs.extend(left[i:])  # rs+=left[i:]
    if j &lt; len(right):
        rs.extend(right[j:])  # rs+=right[i:]
    return rs

def merge_sort(nums):
    &#39;&#39;&#39;递归：&#39;&#39;&#39;
    if len(nums) &lt;= 1:
        return nums
    mid = len(nums) // 2
    # 分割
    left, right = nums[:mid], nums[mid:]
    # 排序
    left = merge_sort(left)
    right = merge_sort(right)
    # 合并
    return meger(left, right)


def merge_sort_2(nums):
    &#39;&#39;&#39;非递归&#39;&#39;&#39;
    nums = [[num] for num in nums ]
    while len(nums)&gt;1:
        ns = []
        for i in range(round(len(nums)/2)):
            ns.append(meger(nums[i*2],nums[i*2+1] if i*2+1&lt;=len(nums)-1 else []))
        nums = ns
    return nums[0]

if __name__ == &#39;__main__&#39;:
    test = [1, 4, 2, 3.6, -1, 0, 25, -34, 8, 9, 1, 0]
    print(&quot;original:&quot;, test)
    start = time.time()
    print(&quot;======time start:%s======&quot; % start)
    print(&quot;Sorted:&quot;, merge_sort(test))
    end = time.time()
    print(&quot;======time start:%s======&quot; % (end-start))
    print(&quot;Sorted:&quot;, merge_sort_2(test))
    end1 = time.time()
    print(&quot;======time start:%s======&quot; % (end1-end))
</code></pre>

]]></content>
  </entry>
  
</feed>
